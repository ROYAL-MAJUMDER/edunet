# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load Dataset
# Assuming the dataset has 'text' (email content) and 'label' (spam/ham)
df = pd.read_csv('spam.csv', encoding='latin-1')
df = df.rename(columns={"v1": "label", "v2": "text"}).drop(columns=df.columns[2:])
df['label'] = df['label'].map({'spam': 1, 'ham': 0})

# Split data into train and test sets
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocess Text using TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english', max_features=3000)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Train Model using Na√Øve Bayes
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Predictions and Evaluation
y_pred = model.predict(X_test_tfidf)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Example Deployment using Flask (Optional)
from flask import Flask, request, jsonify
app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    email = request.json.get('email')
    email_vectorized = tfidf.transform([email])
    prediction = model.predict(email_vectorized)[0]
    return jsonify({'spam': bool(prediction)})

if __name__ == '__main__':
    app.run(debug=True)
